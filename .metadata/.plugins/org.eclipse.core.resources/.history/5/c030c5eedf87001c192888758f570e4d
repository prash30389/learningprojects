package com.acttime.generic;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;



public class ExtentReportsListeners implements IReporter {
	private ExtentReports extent;
	static ExtentTest test;

	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites,
			String outputDirectory) {
		ExtentSparkReporter htmlReporter = new ExtentSparkReporter(outputDirectory + File.separator
				+ "LatestHighTechReport.html");

		for (ISuite suite : suites) {
			Map<String, ISuiteResult> result = suite.getResults();

			for (ISuiteResult r : result.values()) 
			{
				ITestContext context = r.getTestContext();

				buildTest(context.getPassedTests(), Status.PASS);
				buildTest(context.getFailedTests(), Status.FAIL);
				buildTestNodes(context.getSkippedTests(), Status.SKIP);
			}
		}

		extent.flush();
		
	}

	private void buildTestNodes(IResultMap tests, Status status) {
		if (tests.size() > 0) {

			List<ITestResult> resultList = new LinkedList<ITestResult>(tests.getAllResults());

			class ResultComparator implements Comparator<ITestResult> {
				public int compare(ITestResult r1, ITestResult r2) {
					return getTime(r1.getStartMillis()).compareTo(getTime(r2.getStartMillis()));
				}
			}

			Collections.sort(resultList, new ResultComparator());

			for (ITestResult result : resultList) {

			//	String sample = result.getTestContext().getCurrentXmlTest().getSuite().getName();
				@SuppressWarnings("unused")
				String sample = result.getTestContext().getCurrentXmlTest().getSuite().getName();

			//	test = extent.createTest(result.getMethod().getDescription());
				
				Object[] value1=result.getParameters();
				String arrValue="[";
				if(value1.length>0){
					for(Object ob:value1){
						arrValue= arrValue+" "+ob+" ";
					}
					test = extent.createTest(result.getMethod().getDescription()+":Data Set: "+arrValue+"]");
				}else {
					test = extent.createTest(result.getMethod().getDescription());
				}

				for (String group : result.getMethod().getGroups()) {
					test.getModel().setStartTime(getTime(result.getStartMillis()));
					test.assignCategory(group);
					test.getModel().setEndTime(getTime(result.getEndMillis()));
				}

				if (result.getStatus() == ITestResult.FAILURE) {
					test.fail(MarkupHelper.createLabel(result.getName() + " Test Case is FAILED", ExtentColor.RED));
					test.getModel().setStartTime(getTime(result.getStartMillis()));
					test.getModel().setEndTime(getTime(result.getEndMillis()));
					test.fail(result.getThrowable());

				} else if (result.getStatus() == ITestResult.SKIP) {
					test.skip(MarkupHelper.createLabel(result.getName() + " Test Case is SKIPPED", ExtentColor.YELLOW));
					test.getModel().setStartTime(getTime(result.getStartMillis()));
					test.getModel().setEndTime(getTime(result.getEndMillis()));
					test.skip(result.getThrowable());
				} else if (result.getStatus() == ITestResult.SUCCESS) {
					test.pass(MarkupHelper.createLabel(result.getMethod().getDescription() + " got "
							+ status.toString().toLowerCase() + "ed", ExtentColor.GREEN));
					test.getModel().setStartTime(getTime(result.getStartMillis()));
					test.getModel().setEndTime(getTime(result.getEndMillis()));
				
				}

			}
		}

	}

	private Date getTime(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.getTime();
	}
}